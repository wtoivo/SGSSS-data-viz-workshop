# Scatterplots

Correlation data are typically visualised with a scatterplot.Scatterplots are created by calling `geom_point()` and require both an `x` and `y` variable to be specified in the mapping.

```{r point-plot, fig.cap="Scatterplot of reaction time versus age.", message = FALSE}
ggplot(dat_long, aes(x = rt, y = age)) +
  geom_point()
```

A line of best fit can be added with an additional layer that calls the function `geom_smooth()`. The default is to draw a LOESS or curved regression line. However, a linear line of best fit can be specified using `method = "lm"`. By default, `geom_smooth()` will also draw a confidence envelope around the regression line; this can be removed by adding `se = FALSE` to `geom_smooth()`. A common error is to try and use `geom_line()` to draw the line of best fit, which whilst a sensible guess, will not work (try it).

```{r smooth-plot, warning = FALSE, fig.cap="Line of best fit for reaction time versus age.", message = FALSE}
ggplot(dat_long, aes(x = rt, y = age)) +
  geom_point() +
  geom_smooth(method = "lm")
```

## Grouped scatterplots

Similar to the density plot, the scatterplot can also be easily adjusted to display grouped data. For `geom_point()`, the grouping variable is mapped to `colour` rather than `fill` and the relevant `scale_*` function is added.

```{r scatter-grouped, warning = FALSE,fig.cap="Grouped scatterplot of reaction time versus age by condition.", message = FALSE}
ggplot(dat_long, aes(x = rt, y = age, colour = condition)) +
  geom_point() +
  geom_smooth(method = "lm") +
  scale_colour_discrete(name = "Condition",
                      labels = c("Non-Word", "Word"))
```

## Facets

So far we have produced single plots that display all the desired variables. However, there are situations in which it may be useful to create separate plots for each level of a variable. This can also help with accessibility when used instead of or in addition to group colours.

-   Rather than using `colour = condition` to produce different colours for each level of `condition`, this variable is instead passed to `facet_wrap()`.
-   Set the number of rows with `nrow` or the number of columns with `ncol`. If you don't specify this, `facet_wrap()` will make a best guess.

```{r scatterplot-facet, fig.cap="Faceted scatterplot"}
ggplot(dat_long, aes(x = rt, y = age)) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(facets = vars(condition), nrow = 2)
```


## Customisation 2

### Specifying axis `breaks` with `seq()`

Previously, when we have edited the `breaks` on the axis labels, we have done so manually, typing out all the values we want to display on the axis. For example, the below code edits the y-axis so that `age` is displayed in increments of 5. 

```{r breaks1, eval = FALSE}
ggplot(dat_long, aes(x = rt, y = age)) +
  geom_point() +
  scale_y_continuous(breaks = c(20,25,30,35,40,45,50,55,60))
```

However, this is somewhat inefficient. Instead, we can use the function `seq()` (short for sequence) to specify the first and last value and the increments `by` which the breaks should display between these two values.

```{r breaks2, eval = FALSE}
ggplot(dat_long, aes(x = rt, y = age)) +
  geom_point() +
  scale_y_continuous(breaks = seq(20,60, by = 5))
```








